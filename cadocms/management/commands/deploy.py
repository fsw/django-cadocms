import fileinput, os, sys, hashlib, tempfile

from django.core.management.base import BaseCommand, CommandError
from fabric.api import local, run, env, cd, hosts, prompt, lcd, settings, sudo
from fabric.contrib import files, console
from fabric.operations import put
from django.conf import settings as django_settings
from fabric import colors
from difflib import context_diff

from cadocms.settings import HostSettings
env.use_ssh_config = True

class Command(BaseCommand):
    args = '<host>'
    help = 'Deploys to specified host'
    
    """
    if HostSettingsClass.NAME == host_name and HostSettingsClass.SRCROOT == host_srcroot:
                CurrentHostSettingsClass = HostSettingsClass
                found = True
        if not found:
            print 'THIS SEEMS LIKE A DEV SERVER'
        self._HOST = CurrentHostSettingsClass
        
    return self._HOST
    """
    
    def handle(self, *args, **options):
        
        host = None
        hostname = 'unknown'
        hosts = []
        if len(args):
            hostname = args[0]
            
        for HostSettingsClass in HostSettings.__subclasses__():
            name = HostSettingsClass.__name__.replace('HostSettings', '').lower()
            hosts.append(name)
            if hostname == name:
                host = HostSettingsClass
                
        if host is None:
            print 'host should be one of:', hosts
            raise Exception("Unknown host %s" % (hostname,))
        #if 
        env.host_string = host.HOST_STRING
        print colors.red("TEST COMMAND:", bold=True)
        run("ls")
        #run("source virtualenv/bin/activate");
        virtpath = host.PYTHON_PREFIX
        
        with cd(host.SRCROOT):
            print colors.red("UPDATING CODEBASE:", bold=True)
            run("git pull origin master")


            print colors.red("INSTALLING REQUIREMENTS:", bold=True)
            run("%spip install -q -r requirements.txt" % virtpath)
        
            print colors.red("REGENERATIN CONFIG FILES:", bold=True)
            run("%spython manage.py regenerate_config" % virtpath)
            run("%spython manage.py build_solr_schema > config/solr_schema.xml" % virtpath)
            
            """
            config_files = [
                     ("crontab", 
                      "crontab -l", 
                      "crontab config/crontab"),
                     ("nginx", 
                      "cat /etc/nginx/conf.d/dev.yardgear.com.au.conf", 
                      "cp config/nginx /etc/nginx/conf.d/dev.yardgear.com.au.conf"),
                     ("solr_schema.xml", 
                      "cat /opt/solr/yardgear/conf/schema.xml", 
                      "cp config/solr_schema.xml /opt/solr/yardgear/conf/schema.xml"),
                     ]
            """
            for name, getter, setter, combined in host.CONFIGS:
                diff = False
                current = run(getter, quiet = True, warn_only = True).splitlines()
                current =[line+"\n" for line in current]
                new = run("cat config/" + name, quiet = True).splitlines()
                new =[line+"\n" for line in new]
                
                if combined:
                    combined = []
                    hash = hashlib.md5(host.APPROOT).hexdigest()
                    start_line = "##### CHUNK GENERATED BY CADOCMS %s PLEASE DON'T MODIFY #####\n" % hash 
                    end_line = "##### END OF CHUNK GENERATED BY CADOCMS %s #####\n" % hash
                    if start_line not in current:
                        current.append(start_line)
                    if end_line not in current:
                        current.append(end_line)
                    in_chunk = False    
                    for line in current:
                        if line == start_line:
                            in_chunk = True
                            combined.append(start_line)
                            combined = combined + new
                            combined.append(end_line)
                        if not in_chunk:
                            combined.append(line)
                        if line == end_line:
                            in_chunk = False
                    tf = tempfile.NamedTemporaryFile()
                    tfName = tf.name
                    tf.seek(0)
                    print current, new, combined
                    for line in combined:
                        tf.write(line)
                    tf.flush()
                    put(tfName, 'config/%s.combined' % name)
                    new = combined
                    name = name + '.combined'
                    
                for line in context_diff(current, new, fromfile='CURRENT', tofile='NEW'):
                    diff = True
                choice = 'd'
                if diff:
                    while choice == 'd':    
                        choice = console.prompt('%s config file differs. [d]=show diff, [r]=replace, [i]=ignore' % (name,), default='i', validate='d|r|i')
                        if (choice == 'd'):
                            for line in context_diff(current, new, fromfile='CURRENT', tofile='NEW'):
                                sys.stdout.write(line)
                        if (choice == 'r'):
                            run("cat config/" + name + " " + setter)
            """
            #if current != new and console.confirm("Do you want to replace crontab?"):
            return
        
            for site in django_settings.SITES:
                print colors.red("INSTALLING SITE %s:" % site.CADO_PROJECT, bold=True)
                arguments = ''
                if django_settings.MULTISITE:
                    arguments = site.CADO_PROJECT
                #run("git submodule init")
                #run("git submodule update")
                run("%spython manage.py syncdb %s" % (virtpath, arguments))
                run("%spython manage.py migrate %s" % (virtpath, arguments))
                run("%spython manage.py collectstatic %s --noinput" % (virtpath, arguments))
                run("%spython manage.py restyle_tinymce %s" % (virtpath, arguments))
                
                print colors.yellow("RESTARTING FASTCGI:", bold=True)
                
                with settings(warn_only=True): 
                    run("kill -9 `cat ~/%s.pid`" % site.CADO_PROJECT)
                
                run("%spython manage.py runfcgi %s method=prefork socket=~/%s.sock pidfile=~/%s.pid" % (virtpath, site.CADO_PROJECT, site.CADO_PROJECT, site.CADO_PROJECT) )
                run("sleep 5")
                run("chmod 766 ~/%s.sock" % site.CADO_PROJECT)
